@using MoleGame.Components
@page "/"

<div class="gear-icon-container" @onclick="ToggleSettingsPopup">
    <img src="img/gear.png" class="gear-icon" alt="Settings"/>
</div>

<div class="user-icon-container" @onclick="ToggleProfilePopup">
    <img src="img/user.png" class="user-icon" alt="User" />
</div>


@if (isSettingsPopupVisible)
{
    <div class="popup-overlay">
        <div class="popup-content">
            <h2>Select Difficulty</h2>
            <button @onclick="@(() => ChangeDifficulty("easy"))">Easy</button>
            <button @onclick="@(() => ChangeDifficulty("medium"))">Medium</button>
            <button @onclick="@(() => ChangeDifficulty("hard"))">Hard</button>
            <button class="close-button" @onclick="ToggleSettingsPopup">Close</button>  
        </div>
    </div>
}



@if (isProfilePopupVisible)
{
    <div class="popup-overlay">
        <div class="popup-content scores">
            <p>Easy High Score: @highScoreEasy</p>
            <p>Medium High Score: @highScoreMedium</p>
            <p>Hard High Score: @highScoreHard</p>
            <button class="close-button" @onclick="ToggleProfilePopup">Close</button>
        </div>
    </div>
}

<div class="wallpaper">


<div class="info-container @difficulty">
    <p class="title">Mouse Tracking Trainer</p>
    <div class="game-info">
        <h2 style="margin-top:10px">Score: @score</h2>
        <button class="start-button" @onclick="@(()=>Start())">Start</button>
        <button class="start-button" @onclick="@(()=>Reset())">Reset</button>
        <h2 style="margin-top:10px">Time: @currentTime</h2>
    </div>



    <div class="board">
        @foreach (var s in Squares)
        {
            <Square SquareModel = "s" onMouseUp="()=>MouseUp(s)"/>
        }
    </div>
</div>
</div>



@code {
    private int highScoreEasy;
    private int highScoreMedium;
    private int highScoreHard;

    private bool isSettingsPopupVisible = false;
    private bool isProfilePopupVisible = false;

    private void ToggleSettingsPopup()
    {
        isSettingsPopupVisible = !isSettingsPopupVisible;
    }

    private void ToggleProfilePopup()
    {
        isProfilePopupVisible = !isProfilePopupVisible;
    }

    PeriodicTimer gameLoopTimer;
    PeriodicTimer gameTimeTimer;

    private void MouseUp(SquareModel s)
    {
        if (gameIsRunning)
        {
            if(s.Id == hitPosition)
            {
                score += 1;
                Squares[s.Id].IsShown = false;
                hitPosition = -1;
            }
        }
    }

    private Random random = new Random();
    int? lastPosition = null;

    private void SetNextAppearance()
    {
        if (lastPosition != null)
        {
            Squares[(int)lastPosition].IsShown = false;
        }

        int randomPosition;

        do
        {
            randomPosition = random.Next(0, numberOfSquares);
        } while (lastPosition == randomPosition);

        Squares[randomPosition].IsShown = true;
        hitPosition = randomPosition;
        lastPosition = randomPosition;
        StateHasChanged();
    }

    private async Task GameLoopAsync(PeriodicTimer timer)
    {
        while (gameIsRunning)
        {
            SetNextAppearance();
            await timer.WaitForNextTickAsync();
        }
    }

    private async Task GameTimeAsync(PeriodicTimer timer)
    {
        while (gameIsRunning)
        {
            currentTime--;
            if(currentTime <= 0)
            {
                SetHighScore();
                Reset();
            }
            
            await timer.WaitForNextTickAsync();
        }
    }

    private void Start()
    {
        gameIsRunning = true;
        gameLoopTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(gameSpeed));
        _ = GameLoopAsync(gameLoopTimer);
        gameTimeTimer = new PeriodicTimer(TimeSpan.FromSeconds(1));
        _ = GameTimeAsync(gameTimeTimer);
    }

    private void Reset()
    {
        ResetGame();
        gameLoopTimer.Dispose();
        gameTimeTimer.Dispose();
        if (lastPosition != null)
        {
            Squares[(int)lastPosition].IsShown = false;
        }
        lastPosition = null;
    }

    private void SetHighScore()
    {
        switch (difficulty)
        {
            case "easy":
                highScoreEasy = score;
                break;
            case "medium":
                highScoreMedium = score;
                break;
            case "hard":
                highScoreHard = score;
                break;
        }
    }

    private void ChangeDifficulty(string newDifficulty)
    {
        SetDifficulty(newDifficulty);
        Reset();
    }
}